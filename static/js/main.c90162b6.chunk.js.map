{"version":3,"sources":["App.js","serviceWorker.js","Loader.js","DashBoard.js","Login.js","index.js"],"names":["config","bucketName","dirName","region","accessKeyId","secretAccessKey","React","Component","Boolean","window","location","hostname","match","Loader","class","role","DashBoard","handleChangeLanguage","e","setState","language","target","value","handleTitle","title","handleTheory","theory","handleSubmit","requestOptions","method","headers","body","JSON","stringify","state","img_url","code_img_url","fetch","then","response","a","data","ok","error","message","status","Promise","reject","console","log","catch","errorMessage","toString","preventDefault","upload","loader","S3FileUpload","uploadFile","files","err","alert","className","Card","Col","onSubmit","this","Row","onChange","type","cols","rows","name","Login","handleChangePass","password","handleChangeUser","userName","json","resp","flag","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c90162b6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport S3FileUpload from 'react-s3';\r\nimport { uploadFile } from 'react-s3';\r\n\r\nconst config = {\r\n  bucketName: 'prog-app',\r\n  dirName: 'code_image', /* optional */\r\n  region: 'ap-south-1',\r\n  accessKeyId: 'AKIAIDUEQMBWJ3EPI7KQ',\r\n  secretAccessKey: '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',\r\n}\r\n\r\nclass App extends React.Component{\r\n  constructor(){\r\n    super();\r\n\r\n  }\r\n  handleSubmit=(e)=>{\r\n    console.log(\"Form works\")\r\n    alert(this.state.title+\"::\"+this.state.theory)\r\n    \r\n    e.preventDefault();\r\n  }\r\n  handleChangetitle=(e) =>{\r\n    this.setState({title: e.target.value});\r\n  }\r\n  handleChangetheory=(e) =>{\r\n    this.setState({theory: e.target.value});\r\n  }\r\n  handleChange=(e)=>{\r\n    this.setState({language:e.target.value});\r\n  }\r\n  upload(e){\r\n    //console.log(e.target.files[0]);\r\n    S3FileUpload.uploadFile(e.target.files[0],config)\r\n    .then((data)=>{\r\n      console.log(data);\r\n    })\r\n    .catch((err)=>{\r\n      alert(err);\r\n    })\r\n  }\r\n  render(){\r\n    return (\r\n      <div>\r\n        <h1>AWS File upload</h1>\r\n        <div>\r\n          <form onSubmit={this.handleSubmit}>\r\n          <label>\r\n          Pick your favorite flavor:\r\n          <select value={this.state.language} onChange={this.handleChangeLanguage}>\r\n            <option value=\"Cpp\">Cpp</option>\r\n            <option value=\"Java\">Java</option>\r\n            <option value=\"Python\">Python</option>\r\n           \r\n          </select>\r\n        </label>\r\n            <input type=\"text\" value={this.state.title} onChange={this.handleChangetitle}></input>\r\n            <input type=\"text\" value={this.state.theory} onChange={this.handleChangetheory}></input>\r\n            <input type=\"file\" onChange={this.upload}></input>\r\n            <input type=\"submit\" value=\"Submit\"  />\r\n          </form>\r\n        </div>\r\n      </div>\r\n      );\r\n    }\r\n  }\r\n  export default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Loader() {\r\n    return (\r\n       \r\n            <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"sr-only\">Loading...</span>\r\n            </div>\r\n        \r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Col, Row } from 'react-bootstrap'\r\nimport {Card} from 'react-bootstrap'\r\nimport './dashBoard.css'\r\nimport S3FileUpload from 'react-s3';\r\nimport { uploadFile } from 'react-s3';\r\nimport Loader from './Loader'\r\nconst config = {\r\n    bucketName: 'prog-app',\r\n    dirName: 'code_image', /* optional */\r\n    region: 'ap-south-1',\r\n    accessKeyId: 'AKIAIDUEQMBWJ3EPI7KQ',\r\n    secretAccessKey: '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',\r\n}\r\nclass DashBoard extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            language: \"Python\",\r\n            title: \"\",\r\n            theory: \"\",\r\n            code_img_url: \"\",\r\n            loader:false\r\n        }\r\n    }\r\n    handleChangeLanguage = (e) => {\r\n        this.setState({\r\n            language: e.target.value\r\n        })\r\n    }\r\n    handleTitle = (e) => {\r\n        this.setState({\r\n            title: e.target.value\r\n        })\r\n    }\r\n    handleTheory = (e) => {\r\n        this.setState({\r\n            theory: e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                title: this.state.title,\r\n                theory: this.state.theory,\r\n                language: this.state.language,\r\n                img_url: this.state.code_img_url\r\n            })\r\n        };\r\n        fetch('http://15.206.132.187:8080/addContent', requestOptions)\r\n            .then(async response => {\r\n                const data = await response;\r\n\r\n                // check for error response\r\n                if (!response.ok) {\r\n                    // get error message from body or default to response status\r\n                    const error = (data && data.message) || response.status;\r\n                    return Promise.reject(error);\r\n                }\r\n                console.log(\"response\", data)\r\n                this.setState({ title:\"\",theory:\"\",code_img_url:\"\" ,language:\"Python\"})\r\n            })\r\n            .catch(error => {\r\n                this.setState({ errorMessage: error.toString() });\r\n                console.error('There was an error!', error);\r\n            });\r\n            e.preventDefault();\r\n       \r\n    }\r\n    upload = (e) => {\r\n        //console.log(e.target.files[0]);\r\n        this.setState({\r\n            loader:true\r\n        })\r\n        S3FileUpload.uploadFile(e.target.files[0], config)\r\n            .then((data) => {\r\n                console.log(data[\"location\"]);\r\n                this.setState({ code_img_url: data[\"location\"],loader:false });\r\n\r\n            })\r\n            .catch((err) => {\r\n                alert(err);\r\n            })\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <html>\r\n            <body>\r\n                \r\n                <div className=\"outer-div\">\r\n                    <div className=\"inner-div\">\r\n                        <div className=\"card1\">\r\n                            <h1 className=\"heading1\">DASH BOARD</h1>\r\n                            <Card className=\"card2\">\r\n                                <Col>\r\n                                    <form onSubmit={this.handleSubmit}>\r\n                                        <Row>\r\n                                            <label className=\"lang\">\r\n                                                Language:<br></br>\r\n                                                </label>\r\n                                                \r\n                                                <select value={this.state.language} onChange={this.handleChangeLanguage}>\r\n                                                    <option value=\"Java\">Java</option>\r\n                                                    <option value=\"Cpp\">Cpp</option>\r\n                                                    <option value=\"Python\">Python</option>\r\n                                                </select>\r\n                                           \r\n                                        </Row>\r\n                                        <Row>\r\n                                            <label className = \"title_color\">\r\n                                                <br></br>Title:<br></br>\r\n                                                </label>\r\n                                                \r\n                                                <input className=\"title\" type=\"text\" value={this.state.title} onChange={this.handleTitle}></input>\r\n                                            \r\n                                        </Row>\r\n                                        <Row>\r\n                                            <label>\r\n                                                <h4 className=\"theory_color\">Theory:</h4>\r\n                                                <textarea className=\"theory\" cols=\"50\" rows=\"10\" type=\"text\" value={this.state.theory} onChange={this.handleTheory}></textarea>\r\n                                            </label>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <label className=\"code\">\r\n                                                Code:<br></br>\r\n                                                </label>\r\n                                            <input type=\"file\" name=\"Code Image\" onChange={this.upload}></input>\r\n                                            \r\n                                        </Row>\r\n                                    <Row>\r\n                                        {(this.state.loader) ? <Loader/> : <input className=\"submit\" type=\"submit\" ></input>}\r\n                                        \r\n                                    </Row>\r\n                                </form>\r\n                            </Col>\r\n                        </Card>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            </body>\r\n            </html>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DashBoard;","import React from 'react'\r\nimport { Row, Col, Card } from \"react-bootstrap\";\r\nimport './Login.css'\r\nimport './dashBoard.css'\r\nimport DashBoard from './DashBoard';\r\nclass Login extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            userName: \"\",\r\n            password: \"\",\r\n            resp: \"\",\r\n            flag:0\r\n        }\r\n    }\r\n    handleChangePass = (e) => {\r\n        //console.log(e.target.value)\r\n        this.setState({\r\n            password: e.target.value\r\n        })\r\n\r\n        //this.state.password=e.target.value\r\n        //console.log(this.password)\r\n    }\r\n\r\n    handleChangeUser = (e) => {\r\n        this.setState({\r\n            userName: e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                userName: this.state.userName,\r\n                password: this.state.password\r\n            })\r\n        };\r\n        fetch('http://15.206.132.187:8080/login', requestOptions)\r\n            .then(async response => {\r\n                const data = await response.json();\r\n\r\n                // check for error response\r\n                if (!response.ok) {\r\n                    // get error message from body or default to response status\r\n                    const error = (data && data.message) || response.status;\r\n                    return Promise.reject(error);\r\n                }\r\n                console.log(\"response---\", data)\r\n                this.setState({ resp: data['status'] })\r\n                console.log('My res--')\r\n                console.log(this.state.resp)\r\n                if (this.state.resp== \"success\") {\r\n                    console.log('in if')\r\n                    this.setState({\r\n                        flag:1\r\n                    })\r\n                   \r\n                } else{\r\n                    this.setState({\r\n                        flag:2\r\n                    })\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                this.setState({ errorMessage: error.toString() });\r\n                console.error('There was an error!', error);\r\n            });\r\n\r\n\r\n\r\n    \r\n        \r\n\r\n        e.preventDefault()\r\n\r\n    }\r\n    render() {\r\n        if (this.state.flag=== 1) {\r\n            return(\r\n                <DashBoard/>\r\n            )\r\n            \r\n        }else if(this.state.flag==2){\r\n            alert('Login Failed')\r\n            return(<Login/>)\r\n        }\r\n         else {\r\n            return (\r\n               \r\n                <div className=\"Login\">\r\n                    <h1 className=\"login_color\">Login</h1>\r\n                    <Card className=\"card3\">\r\n                        <Col>\r\n                            <form onSubmit={this.handleSubmit}>\r\n\r\n                                <Row>\r\n                                    <label className = \"username_color\">\r\n                                        UserName:<br></br>\r\n                                <input className=\"title\" type=\"text\" value={this.state.userName} onChange={this.handleChangeUser}></input>\r\n                                    </label>\r\n                                </Row>\r\n                                <Row>\r\n                                    <label className = \"password_color\">\r\n                                        Password:<br></br>\r\n                                <input className=\"theory\" type=\"text\" value={this.state.password} onChange={this.handleChangePass}></input>\r\n                                    </label>\r\n                                </Row>\r\n\r\n                                <Row>\r\n                                    <input className=\"submit\" type=\"submit\" ></input>\r\n                                </Row>\r\n                            </form>\r\n                        </Col>\r\n                    </Card>\r\n                </div>\r\n              \r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport DashBoard from './DashBoard';\r\nimport Login from './Login'\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Login/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}